for(i in 1:length(yvector)){
yvector[i] <- data[data$interval == intervalvec[i]]
}
for(i in 1:length(yvector)){
yvector[i] <- data[data$interval == intervalvec[i],]
}
warnings()
length(yvector)
yvector <- rep(0,length(intervalvec))
length(yvector)
for(i in 1:length(yvector)){
yvector[i] <- data[data$interval == intervalvec[i],]
}
warnings()
yvector
yvector[1]
intervaldata <- data[data$interval == intervalvec[i],]
intervaldata$steps
mean(intervaldata$steps)
mean(complete.cases(intervaldata$steps)
)
complete.cases(intervaldata$steps)
intervaldatag <- intervaldata[complete.cases("steps")]
intervaldatag
intervaldata
intervaldatag <- intervaldata[complete.cases(intervaldata$steps)]
intervaldatag <- intervaldata[complete.cases(intervaldata$steps),]
intervaldatag
mean(intervaldatag$steps)
for(i in 1:length(yvector)){
intervaldata <- data[data$interval == intervalvec[i],] #look up entries which have the specified interval value
intervaldatag <- intervaldata[complete.cases(intervaldata$steps),] #take out the entries with NA values
stepmean <- mean(intervaldatag$steps)
yvector[i] <- stepmean
}
yvector
yvector[1]
intervalvec
?plot
plot(intervalvec,yvector,type = "l")
?plot
plot(intervalvec,yvector,type = "l",xlab="Time interval",ylab="Average number of steps")
max(yvector)
?max
yvector
type(yvector)
?type
typeof(yvector)
max(yvector)
?max
spev = as.numeric(yvector)
spev
max(spev)
?max
pmax(spev)
pmax(spev)
which.max(spev)
intervalvec
intervalvec[15]
intervalvec[which.max(spev)]
intervalvec
which.max(spev)
size(datag)
length(datag)
dimension(datag)
nrow(data)
nrow(datag)
for(i in 1:length(yvector)){
intervaldatag <- data[datag$interval == intervalvec[i],] #look up entries which have the specified interval value
#intervaldatag <- intervaldata[complete.cases(intervaldata$steps),] #take out the entries with NA values
stepmean <- mean(intervaldatag$steps) #calculate mean
yvector[i] <- stepmean #store mean in the yvector
}
intervalvec
plot(intervalvec,yvector,type = "l",xlab="Time interval",ylab="Average number of steps")
yvector
for(i in 1:length(yvector)){
intervaldatag <- data[data$interval == intervalvec[i],] #look up entries which have the specified interval value
intervaldatag <- intervaldata[complete.cases(intervaldata$steps),] #take out the entries with NA values
stepmean <- mean(intervaldatag$steps) #calculate mean
yvector[i] <- stepmean #store mean in the yvector
}
plot(intervalvec,yvector,type = "l",xlab="Time interval",ylab="Average number of steps")
for(i in 1:length(dayaverage)){
datedatag <- data[datag$date == datevec[i],] #look up entries which have the specified date. Note that we use the cleaned-up version datag, not the original data.
daymean <- mean(datedatag$steps) #calculate mean
dayaverage[i] <- stepmean #store mean in the yvector
}
datevec <- unique(data$date) #extract unique dates from the data
dayaverage <- rep(0,length(datevec)) #create the vector for storing the means
for(i in 1:length(dayaverage)){
datedatag <- data[datag$date == datevec[i],] #look up entries which have the specified date. Note that we use the cleaned-up version datag, not the original data.
daymean <- mean(datedatag$steps) #calculate mean
dayaverage[i] <- stepmean #store mean in the yvector
}
dayaverage
datedatag <- data[datag$date == datevec[1],]
datedatag
datag$date
datedatag <- datag[datag$date == datevec[i],]
datedatag
datag$date
datevec
datag$date == datevec[i]
datag$date == datevec[1]
datevec[i]
typeof(datevec)
test = datevec[1]
test
date = 2012-10-01
date = "2012-10-01"
datag$date == datevec[1]
check = datag$date == datevec[1]
check[check == FALSE]
check[check == TRUE]
test = c(TRUE, FALSE, FALSE)
test[test==TRUE]
check = data$date == datevec[1]
check[check == TRUE]
datag
datevec <- unique(datag$date)
check = datag$date == datevec[1]
check[check == TRUE]
datevec <- unique(datag$date) #extract unique dates from the data
dayaverage <- rep(0,length(datevec)) #create the vector for storing the means
for(i in 1:length(dayaverage)){
datedatag <- datag[datag$date == datevec[i],] #look up entries which have the specified date. Note that we use the cleaned-up version datag, not the original data.
daymean <- mean(datedatag$steps) #calculate mean
dayaverage[i] <- stepmean #store mean in the yvector
}
```
datevec <- unique(datag$date) #extract unique dates from the data
dayaverage <- rep(0,length(datevec)) #create the vector for storing the means
for(i in 1:length(dayaverage)){
datedatag <- datag[datag$date == datevec[i],] #look up entries which have the specified date. Note that we use the cleaned-up version datag, not the original data.
daymean <- mean(datedatag$steps) #calculate mean
dayaverage[i] <- stepmean #store mean in the yvector
}
dayaverage
datedatag <- datag[datag$date == datevec[1],]
datedatag
mean(datedatag$steps)
for(i in 1:length(dayaverage)){
datedatag <- datag[datag$date == datevec[i],] #look up entries which have the specified date. Note that we use the cleaned-up version datag, not the original data.
daymean <- mean(datedatag$steps) #calculate mean
dayaverage[i] <- daymean #store mean in the yvector
}
dayaverage
filldata <- data
filldata[1]
filldata[[1]]
filldata[1,]
filldata[1,]$steps
filldata[1,]$steps == NA
filldata[1,]$steps == "NA"
is.na(filldata[1,]$steps)
filldata[1,]$date
which(datevec == filldata[1,]$date)
datevec
yvector
intervalvec <- unique(datag$interval) #extract out the unique values of the intervals from the list. Note that we use the cleaned-up version of the data, "datag".
yvector <- rep(0,length(intervalvec)) #this vector will be used to store the y values for the plot. Since the x-axis will be the time intervals, the length should be the same as the number of time intervals.
for(i in 1:length(yvector)){
intervaldatag <- datag[datag$interval == intervalvec[i],] #look up entries which have the specified interval value
stepmean <- mean(intervaldatag$steps) #calculate mean
yvector[i] <- stepmean #store mean in the yvector
}
```
yvector
intervalvec
length(intervalvec)
length(yvector)
which(intervalvec == filldata$interval)
?which
which(intervalvec == filldata[1,]$interval)
which(intervalvec == filldata[2,]$interval)
which(intervalvec == filldata[3,]$interval)
which(intervalvec == filldata[36636,]$interval)
which(intervalvec == filldata[363,]$interval)
yvector[75]
filldataset <- data #first create a clone of the data which we will fill in for the missing values
for (i in 1:length(filldataset))
if (is.na(filldataset[i,]$steps)){
filldata <- yvector[which(intervalvec == filldataset[i,]$interval] #find the entry in intervalvec which corresponds to the incomplete entry's interval, then note the position. As yvector and intervalvec are completely parallel to each other, we take the value of yvector in this position to get the data to fill in.
filldataset[i,]$steps <- filldata
}
yvector[which(intervalvec == filldataset[1,]$interval]
yvector[which(intervalvec == filldataset[1,]$interval)]
filldataset <- data #first create a clone of the data which we will fill in for the missing values
for (i in 1:length(filldataset))
if (is.na(filldataset[i,]$steps)){
filldata <- yvector[which(intervalvec == filldataset[i,]$interval)] #find the entry in intervalvec which corresponds to the incomplete entry's interval, then note the position. As yvector and intervalvec are completely parallel to each other, we take the value of yvector in this position to get the data to fill in.
filldataset[i,]$steps <- filldata
}
filldataset
header(filldataset)
head(filldataset)
length(filldataset)
filldataset(6:35,)
filldataset[6:35,]
is.na(filldataset[6,]$steps)
for (i in 1:length(filldataset))
if (is.na(filldataset[i,]$steps)){
filldata <- yvector[which(intervalvec == filldataset[i,]$interval)] #find the entry in intervalvec which corresponds to the incomplete entry's interval, then note the position. As yvector and intervalvec are completely parallel to each other, we take the value of yvector in this position to get the data to fill in.
filldataset[i,]$steps <- filldata
print(filldata)
}
print(filldata)
filldataset
head(filldataset)
head(data)
filldata <- yvector[which(intervalvec == filldataset[4,]$interval)]
filldata
filldataset[i,]$steps <- filldata
head(filldataset)
filldataset[4,]$steps <- filldata
head(filldataset)
for (i in 1:length(filldataset))
if (is.na(filldataset[i,]$steps)){
filldata <- yvector[which(intervalvec == filldataset[i,]$interval)] #find the entry in intervalvec which corresponds to the incomplete entry's interval, then note the position. As yvector and intervalvec are completely parallel to each other, we take the value of yvector in this position to get the data to fill in.
filldataset[i,]$steps <- filldata
}
head(filldataset)
for (i in 1:length(filldataset))
if (is.na(filldataset[i,]$steps)){
filldata <- yvector[which(intervalvec == filldataset[i,]$interval)] #find the entry in intervalvec which corresponds to the incomplete entry's interval, then note the position. As yvector and intervalvec are completely parallel to each other, we take the value of yvector in this position to get the data to fill in.
filldataset[i,]$steps <- filldata
print(i)
}
source("test.R")
test
test.R
for (i in 1:length(filldataset))
if (is.na(filldataset[i,]$steps)){
filldata <- yvector[which(intervalvec == filldataset[i,]$interval)] #find the entry in intervalvec which corresponds to the incomplete entry's interval, then note the position. As yvector and intervalvec are completely parallel to each other, we take the value of yvector in this position to get the data to fill in.
filldataset[i,]$steps <- filldata
}
for (i in 1:length(filldataset))
+     if (is.na(filldataset[i,]$steps)){
+         filldata <- yvector[which(intervalvec == filldataset[i,]$interval)] #find the entry in intervalvec which corresponds to the incomplete entry's interval, then note the position. As yvector and intervalvec are completely parallel to each other, we take the value of yvector in this position to get the data to fill in.
+         filldataset[i,]$steps <- filldata
+
source("test.R")
length(filldataset)
for (i in 1:nrow(filldataset))
if (is.na(filldataset[i,]$steps)){
filldata <- yvector[which(intervalvec == filldataset[i,]$interval)] #find the entry in intervalvec which corresponds to the incomplete entry's interval, then note the position. As yvector and intervalvec are completely parallel to each other, we take the value of yvector in this position to get the data to fill in.
filldataset[i,]$steps <- filldata
}
head(filldataset)
sum(c(1,2,3))
i = 1
datevec <- unique(datag$date)
datevec
datedatag <- datag[datag$date == datevec[i],]
datedatag
sum(datedatag$steps)
for (i in 1:length(datevecf)){
datedataf <- filldataset[filldataset$date == datevecf[i],] #look up entries which have the specified date value
totalstepsf[i] <- sum(filldataset$steps) #add up all the steps for that day
}
```
datevecf <- unique(filldataset$date) #extract out a list of all the unique dates in the data.
totalstepsf <- rep(0,length(datevecf)) #create a vector to store the total steps for all the days
for (i in 1:length(datevecf)){
datedataf <- filldataset[filldataset$date == datevecf[i],] #look up entries which have the specified date value
totalstepsf[i] <- sum(filldataset$steps) #add up all the steps for that day
}
totalstepsf
filldataset
filldataset[35:2000,]
?weekdays
datevec
datevec[1]
weekdays[datevec]
weekdays[datevec[[1]]]
weekdays(datevec)
weekdays(35)
weekdays(1)
as.numeric(datevec[1])
datevec[1]
as.numeric(datevec[35])
as.numeric(datevec[34])
library(chron)
x <- seq(Sys.Date()-10, Sys.Date(), by = 1)
x[is.weekend(x)]
datevec[is.weekend(datevec)]
weekdays(x, abbr = TRUE)
weekdays(datevec, abbr = TRUE)
x <- seq(Sys.Date()-10, Sys.Date(), by = 1)
x
datevec
typeof(x)
typeof(datevec)
classof(x)
?class
class(x)
class(ddatevec)
class(datevec)
as.Date(datevec)
datevec
weekdays(as.Date(datevec))
weekdays(x, abbr = TRUE)
# [1] "Wed" "Thu" "Fri" "Sat" "Sun" "Mon" "Tue" "Wed" "Thu" "Fri" "Sat"
x[grepl("Sat|Sun", weekdays(x))]
factor(data)
data
fdata = factor(data)
fdata = factor(data[[1]])
fdata
data[[1]]
filleddataset[[1]]
filldataset[[1]]
filldataset[[1]]
filldataset
filldataset[[1]]
filldataset[[2]]
?factor
x = as.Date(datevec)
weekdays(x, abbr = TRUE)
# [1] "Wed" "Thu" "Fri" "Sat" "Sun" "Mon" "Tue" "Wed" "Thu" "Fri" "Sat"
x[grepl("Sat|Sun", weekdays(x))]
datevec
weekdays(filldataset$date)
weekdays(as.Date(filldataset$date))
fdataset = filldataset
fdataset$day <- weekdayvec
datex <- as.Date(filldataset$date)
datex <- as.Date(fdataset$date)
fdataset$day <- datex
head(fdataset)
weekdayvec <- weekdays(datex,abbr = TRUE)
fdataset$day <- weekdayvec
weekdayvecs = rep(0,1)
fdataset$day <- weekdayvecs
weekdayvecs
head(fdataset)
weekdayvecs = c(1,2,4)
fdataset$day <- weekdayvecs
head(fdataset)
fdataset$day <- weekdayvec
head(fdataset)
fdataset[15:166,]
fdataset[15:266,]
fdataset[15:512,]
fdataset$daytype <- ifelse(fdataset$day == "Sat|Sun","weekend","weekday")
head(fdataset)
fdataset[2000:3000,]
fdataset$daytype <- ifelse(fdataset$day == "Sun","weekend","weekday")
fdataset[2000:3000,]
fdataset$daytype <- ifelse(fdataset$day == "Sun" || "Sat" ,"weekend","weekday")
fdataset$daytype <- ifelse(fdataset$day == "Sun" ||fdataset$day == "Sat" ,"weekend","weekday")
fdataset[2000:3000,]
fdataset$daytype <- ifelse(fdataset$day == "Sun" || fdataset$day == "Sat" ,"weekend","weekday")
fdataset[1800:2900,]
filldataset[1905,]
fdataset[1905,]
fdataset[1905,]$day == "Sun"
fdataset[1905,]$day == "Sun" || fdataset[1905,]$day == "Sat"
fdataset$daytype <- ifelse(fdataset$day == "Sun" ||fdataset$day == "Sat" ,"weekend","weekday")
fdataset[1800:2900,]
fdataset[1905,]$daytype <- ifelse(fdataset$day == "Sun" ||fdataset$day == "Sat" ,"weekend","weekday")
fdataset[1905,]
fdataset[1905,]$daytype <- "weekend"
fdataset[1905,]
fdataset[1905,]$daytype <- ifelse(fdataset$day == "Sun" ||fdataset$day == "Sat" ,"weekend","weekday")
fdataset[1905,]
fdataset[1905,]$daytype <- ifelse(fdataset[1905,]$day == "Sun" ||fdataset[1905,]$$day == "Sat" ,"weekend","weekday")
fdataset[1905,]$daytype <- ifelse(fdataset[1905,]$day == "Sun" ||fdataset[1905,]$day == "Sat" ,"weekend","weekday")
fdataset[1905,]
fdataset$daytype <- ifelse(fdataset$day == "Sun","weekend","weekday")
fdataset[1800:2900,]
fdataset[1500:2900,]
fdataset[1500:2000,]
fdataset$daytype <- ifelse(fdataset$day == "Sat|Sun","weekend","weekday")
fdataset[1500:2000,]
fdataset$day == "Sat|Sun"
fdataset$day == "Sat"
fdataset$day == "Sat" || fdataset$data == "Sun"
fdataset$day == "Sat"||"Sun"
fdataset$day == "Sat||Sun"
fdataset$day == "Sat" | fdataset$data == "Sun"
fdataset$day == "Sat" | fdataset$day == "Sun"
fdataset$day == "Sat" || fdataset$day == "Sun"
fdataset$daytype <- ifelse(fdataset$day == "Sat" | fdataset$day == "Sun","weekend","weekday")
fdataset[1500:2000,]
fdataset[1500:2500,]
for(i in 1:length(yvectorday)){
intervaldataf <- filldataset[filldataset$interval == intervalvec[i] && filldataset$daytype == "weekday",] #look up entries which have the specified interval value
stepmeanday <- mean(intervaldataf$steps) #calculate mean
yvectorday[i] <- stepmeanday #store mean in the yvector
}
```
datex <- as.Date(filldataset$date) #need to convert to date format first
weekdayvec <- weekdays(datex,abbr = TRUE) #find the day of the week for the dates
filldataset$day <- weekdayvec #add a field giving the day of the week
filldataset$daytype <- ifelse(filldataset$day == "Sat" | filldataset$day == "Sun","weekend","weekday") #determine whether it is a weekday or a weekend, add this as an additional variable
```
Now we create two vectors for the y-axis: one for weekdays and one for weekends. The code is similar to the one we used earlier for averages without caring about the type of day:
```{r}
yvectorday <- rep(0,length(intervalvec)) #we can use the same intervalvec from before as the list of intervals is the same
yvectorend <- rep(0,length(intervalvec))
#first we do this for weekdays
for(i in 1:length(yvectorday)){
intervaldataf <- filldataset[filldataset$interval == intervalvec[i] && filldataset$daytype == "weekday",] #look up entries which have the specified interval value
stepmeanday <- mean(intervaldataf$steps) #calculate mean
yvectorday[i] <- stepmeanday #store mean in the yvector
}
```
Now we can plot the time series graph:
```{r}
plot(intervalvec,yvectorday,type = "l",xlab="Time interval",ylab="Average number of steps")
```
yvectorday
for(i in 1:length(yvectorday)){
intervaldataf <- filldataset[filldataset$interval == intervalvec[i] && filldataset$daytype == "weekday",] #look up entries which have the specified interval value
stepmeanday <- mean(intervaldataf$steps) #calculate mean
yvectorday[i] <- stepmeanday #store mean in the yvector
print(i)
}
```
yvectorday
for(i in 1:length(yvectorday)){
intervaldataf <- filldataset[filldataset$interval == intervalvec[i] && filldataset$daytype == "weekday",] #look up entries which have the specified interval value
stepmeanday <- mean(intervaldataf$steps) #calculate mean
yvectorday[i] <- stepmeanday #store mean in the yvector
print(stepmeanday)
}
```
filldataset$interval ==intervalvec[1]
filldataset$interval == intervalvec[1]
filldataset$daytype == "weekday"
filldataset[filldataset$interval == intervalvec[i] && filldataset$daytype == "weekday",]
i
i=1
filldataset[filldataset$interval == intervalvec[i] && filldataset$daytype == "weekday",]
intervaldataf <- filldataset[filldataset$interval == intervalvec[i] && filldataset$daytype == "weekday",]
stepmeanday <- mean(intervaldataf$steps)
stepmeanday
i=2
ntervaldataf <- filldataset[filldataset$interval == intervalvec[i] && filldataset$daytype == "weekday",]
intervaldataf <- filldataset[filldataset$interval == intervalvec[i] && filldataset$daytype == "weekday",] #l
intervaldataf
intervalvec[2]
filldataset$interval
filldataset$interval == intervalvec[2]
filldataset$daytype == "weekday"
filldataset$interval == intervalvec[i] && filldataset$daytype == "weekday"
filldataset$interval == intervalvec[i] & filldataset$daytype == "weekday"
?panel
??panel
panel.smooth(intervalvec,yvectorday,type = "l")
for(i in 1:length(yvectorday)){
intervaldataf <- filldataset[filldataset$interval == intervalvec[i] & filldataset$daytype == "weekday",] #look up entries which have the specified interval value
stepmeanday <- mean(intervaldataf$steps) #calculate mean
yvectorday[i] <- stepmeanday #store mean in the yvector
}
panel.smooth(intervalvec,yvectorday,type = "l")
for(i in 1:length(yvectorend)){
intervaldataf <- filldataset[filldataset$interval == intervalvec[i] & filldataset$daytype == "weekend",] #look up entries which have the specified interval value
stepmeanend <- mean(intervaldataf$steps) #calculate mean
yvectorend[i] <- stepmeanend #store mean in the yvector
}
panel.smooth(intervalvec,yvectorend,type = "l")
?panel.smooth
library(graphics)
?lm
length(yvectorend)
length(intervalvec)
plot(intervalvec,yvectorend)
plot(intervalvec,yvector)
plot(intervalvec,yvectorend)
mtcars
library(lattice)
panel.smoother <- function(x, y) {
panel.xyplot(x, y) # show points
panel.loess(x, y)  # show smoothed line
}
attach(mtcars)
hp <- cut(hp,3) # divide horse power into three bands
xyplot(mpg~wt|hp, scales=list(cex=.8, col="red"),
panel=panel.smoother,
xlab="Weight", ylab="Miles per Gallon",
main="MGP vs Weight by Horse Power")
attach(mtcars)
hp <- cut(hp,4) # divide horse power into three bands
xyplot(mpg~wt|hp, scales=list(cex=.8, col="red"),
panel=panel.smoother,
xlab="Weight", ylab="Miles per Gallon",
main="MGP vs Weight by Horse Power")
?attach
?panel.smoother
?panel.smooth
pairs(swiss, panel = panel.smooth, pch = ".")
swiss
plot1 = plot(intervalvec,yvectorday,type = "l")
plot2 = plot(intervalvec,yvectorend,type = "l")\
plot1 = plot(intervalvec,yvectorday,type = "l")
plot2 = plot(intervalvec,yvectorend,type = "l")
pairs(c(plot1,plot2), panel = panel.smooth, pch = ".")
par(mfrow=c(2,1))
plot(intervalvec,yvectorday,type = "l")
plot(intervalvec,yvectorend,type = "l")
?par
?mfrow
??mfrow
?plot
?hist
?Plot
?plot
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
